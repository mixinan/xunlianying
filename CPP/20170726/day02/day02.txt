day02

vi(vim)的使用
	三种工作模式：
		插入模式
		正常模式
		命令模式

	正常模式：
		通过vi命令，进入文件时的状态
		在其它模式下，按Esc键后的状态
		在其它模式互相切换时，需要用正常模式过渡
		在此模式下，可以复制、粘贴、跳转等
	
	插入模式：
		在正常模式下，按i键进入编辑模式（insert）
		也可以在正常模式下输入：
			o  在当前行的下方另起一行
			O  在当前行的上方另起一行


	命令模式：
		在正常模式下，输入"英文"的冒号:进入
		在命令模式下，可以输入复杂命令
		（保存、退出、设置行号等）

	vi的用法：
		vi a.txt
		编辑a.txt（如果不存在，则创建）


		保存相关：
			:x     保存并退出
			:wq    保存并退出
			:q     退出（未改动）
			:q!	 强制退出
			:w     保存

		设置行号：
			:set nu    显示行号
			:set nonu  隐藏行号

		练习：
			1.创建并编辑文件tt.sh
			2.写出3个Linux命令
				执行后，形如
				（显示命令，然后是执行结果）：
					pwd
					/home/tarena
			3.保存并退出
			4.修改tt.sh权限
			5.执行tt.sh

	编辑相关：
		复制、剪切、粘贴、撤销、跳到某一行

		复制：nyy
			n是一个整数，表示复制n行
				从当前行开始数
			如果是复制一行，直接yy即可
			大于2行，会提示复制成功

		粘贴：np
			n是一个整数，表示粘贴n次
				粘贴在下一行

		练习：
			把2008年8月份的日历，
			在2008.txt里显示10遍

			提示：cal 8 2008

		
		剪切：ndd
			n是一个整数，表示剪切n行
				从当前行开始数
			可以当做删除n行来使用（不粘贴）
				

		撤销：u (undo)

		行跳转：
			G   跳到最后一行
			gg  跳到第一行
			nG  跳到第n行

		翻页查看：
			Ctrl + u  往上翻半页（up）
			Ctrl + d  往下翻半页（down）
			Ctrl + f  往下翻一页
			Ctrl + b	 往上翻一页

		切换中英文：
			Ctrl + 空格
			查找要找的字 page up(page down)

	

C语言基础：
	xx.c
	xx.java
	xx.php
	xx.js
	xx.png
	
	开发流程：
		1.创建xx.c文件
		2.通过 vi 编写代码
		3.用gcc 编译xx.c文件，默认生成a.out
		4.执行编译后生成的可执行文件./a.out

	
	int main(){
		
		return 0;
	}


	int    整数
	main   主函数
	()
	{}
	return 0

	int a=5;

	int 整数
	a   标识符（变量名）
	=   赋值符


	变量的声明和赋值：
		声明同时赋值：
			int n=5;
		先声明，再赋值：
			int n;
			n=5;

		声明两个变量：
			int a=5;
			int b=6;

			也可以写作：
				int a=5,b=6;
		
		所谓“变量”，跟“常量”相对应
		值可以变化的量
			int n=8;
			n=10;

			




	标识符（变量）的命名：
		1.不能与系统关键字一样
			int if while for
		2.必须以_或字母开头
			后面可以用数字、字母或_
			int   _4  5a  b
		3.要见名知意
			buttonNumber
		4.驼峰命名法、烤串命名法
			buttonClickNumber
			button_click_number
			user_id
			user_name
			userId
			userName



	写法注意：
		1.{}括号，直接写一对，
			然后把光标放在中间，
			回车换行补充内容
		2.{}里面嵌套的内容，
			要用tab缩进
		  可以使用换行和空格，让格式好看

		3.每一条语句，表示一个完整的事件
			占据一行
			以英文分号（;）结束
		4.语句可以分组管理，比如{}
		5.C语言对大小写敏感




   #include <stdio.h>
   int main(){
       printf("hello world!\n");
       return 0;
   }


	预处理指令：
		以#开头，最后没有分号（;）
		< >  从系统指定路径找文件
		" "  从当前目录去查找文件
		作用：
			把需要用到的头文件导入进来，
			与下面的内容合并成新的文件。
	
	gcc 的编译过程：
		-E   处理预处理指令
			gcc  -E  a.c


		-c   处理预处理指令、完成编译，
				生成a.o文件
			gcc  -c  a.c
		
		-o   处理预处理指令、编译、重命名
			gcc  a.c  -o  hello

	
	注释(给程序员看，对代码没有影响)：
		单行注释  //注释内容
		多行注释  /*注释内容*/


	占位符：
		%d   整数
		%c   字符
		%s   字符串 (hello)
		%f   浮点数（1.563）
		%g   去除小数点后面多余的0

	
	常用数据类型：
		int    整型
		float  浮点数
		char   字符
	
	int n=5;
	printf("hello world,%d\n",n);
	printf("hello world,%d,%d\n",n,n*2);
	printf("n的平方是%d\n",n*n);

	
	特殊字符：
		\n   换行

	C语言里的算术运算：
		+ - * /

		/  求商
			5/2=2
		%  求余数
			5%2=1

	练习：
		定义长方形的长和宽，分别为6、4
		求：长方形的周长和面积，并打印出来

		int chang = 6;
		int kuan = 4;

		printf("周长是%d\n",(chang+kuan)*2);
		printf("面积是%d\n",chang*kuan);

	
	转义字符：
		\   
		\n  换行
		\t  制表符

		\\  显示\
		\"	 显示"
		\'  显示'

	输入：
		int n;
		scanf("%d",&n);
		printf("n的平方=%d\n",n*n);

		scanf("%d%d",&n,&m);

	练习：
		输入长和宽，求面积和周长。

		提示：
			1.先声明两个变量 int chang; int kuan;
			2.提示用户输入长度值 printf("xxx");
				得到用户输入的值，赋给chang
				scanf("%d",&chang);
			3.同上，得到kuan
			4.打印出“周长= ”
			5.打印出“面积= ”
	
