#include <stdio.h>

int add(int a,int b){
	return a+b;
}

int main(){
   printf("hello world!\n");
	
   return 0;
}


函数名称前面的int
int是一种数据类型，表示整数

整数的单词：integer





return  返回
程序执行完，得有一个结果。


表示是否执行成功
一般用0表示执行成功，用-1表示失败。


int main（参数列表）{
	程序要执行的代码段;
	return 0;
}
主函数，是程序的入口



爆米花  做爆米花(玉米,糖,奶油,设备){
	通电；
	开机；
	洗玉米；
	放进去；
	放糖；
	等待30分钟；
	关闭，盛出来；
	
	return 一桶奶油爆米花;
}


int add(int a, int b){
	return a+b;
}




#include <stdio.h>
预处理指令
把要包含的内容，替换过来



gcc   编译工具（翻译官）
test.c  高级语言编写

gcc   源代码文件
生成可执行文件a.out


第一步：处理"预处理指令"
	把stdio.h里面的内容替换过来
	使它与下面的代码组成一个新的文件
	
	gcc -E  源代码文件
	
	验证：自己写一个test.h文件
		#include <stdio.h>
		
		<>表示从系统指定路径寻找.h文件
		""表示从用户写的内容里寻找.h文件
		
		
gcc test.c -o test.out


程序的编写规范：
	程序可以分组管理，用{}包含起来
	每一句代码占据一行，用分号;结尾
	程序之间的嵌套关系，要用缩进(tab)表示
	(){}等成对出现的符号，先写全，再往里面补内容

	
	变量
		int a=10;
		
		变量的声明：  
			数据类型  变量名称;
			int a;
			表示声明了一个整数类型的变量a
		变量的赋值：
			a=10;
			
			i=i+1;

			
			声明并赋值（初始化）：
			int b=12;
			
			
		变量名（标识符）的取名规则：
			不能以数字开头
				应该以字母、_开头,后面可以跟数字
				abc  _a  a1  a2
			不能与系统关键字相同
				int,if,return...
			只能是一个单词
				驼峰命名法
				int buttonNumber = 5;
				下划线式、烤串式
				int button_number = 5;
			区分大小写
				int a=10;
				A 错误
				
				
				
		参数必须是字符串(用“”包裹)
		printf("a");
		a
		
		
		占位符 
		整数类型的占位符   %d
		printf("%d%d",a,b);
		
		后面的数字个数，与""里的占位符个数，要一致
		后面的数字，可以是一个具体值，也可以是一个算式
		占位符的次序，和后面的数字，必须一一对应
		
		
		编程里的加减乘除
		+ - * /（取商） %（取余）
		
		7/3=2
		7%3=1
		
		
		
		scanf   输入
		用法： 
			int a;
			scanf("%d",&a);
			printf("a=%d\n",a);
			
			&是取地址符
			
			
			同时赋值
			int a;
			int b;
			scanf("%d%d",&a,&b);
			
		
			同时声明：
				int a, b;
			
			int a=5,b=7,c,d,e=0,f;
			int a, b=8;
			
			
			
			条件分支,流程控制：
				a=2;
				b=6;
				
				if(条件){
					如果成立，执行
				}else{
					否则，执行
				}
				
				
				求偶数：
					能被2整除
					
					int a;
					
					int yushu = a%2;
					
					
					if(yushu == 0){
						printf("偶数");
					}else{
						printf("奇数");
					}
					
					
					int score;
					
					
					
					if(score>=90){
						优秀
					}else if(score>=70){
						良好
					}else if(score>=60){
						及格
					}else{
						留级吧！
					}
			
				
				switch...case...
				开关     情况
					
				int month;
				
				switch(month){
					case 1:
						春;
					break;
					case 2:
						春;
					break;
					default:
						输入有误
					break;
					
				}
					
					
					
					
输入一个数
	打印它的绝对值
	(大于等于0，返回本身，否则返回相反数)
	
	
	
	
	循环语句：
		for
			一般是知道要循环多少次
			int i;
			for(i=0; i<=10; i=i+1 ){
				要循环的代码;
			}
			
			
		1*1
		1*2 2*2
		1*3 2*3 3*3
		....
		1*9 2*9 3*9 ... 9*9
		
		
		
		
		
		int i;
		int j;
		
		j=1;
		for(i=1; i<=j; i=i+1){
			printf("%d*%d=%d ",i,j,i*j);
		}
		
		j=2;
		for(i=1; i<=j; i=i+1){
			printf("%d*%d=%d ",i,j,i*j);
		}
		
		j=3;
		for(i=1; i<=j; i=i+1){
			printf("%d*%d=%d ",i,j,i*j);
		}
		
		
		
		双层循环打印九九乘法表：
		int i;
		int j;
		for(j=1; j<=9; j=j+1){
			for(i=1; i<=j; i=i+1){
				printf("%d*%d=%d\t",i,j,i*j);
			}
		}
		
		
		
		
		\n   换行
		\t   制表符
		
		
			
			
		while循环：
			
			while(条件){
				执行
			}
			
			
			//底下这段代码，是打印1~9
			
			int i=1;
			while(i<10){ //注释
				//printf("i=%d\n", i);
				i = i+1;
			}
			
			
			
			
			
			if(0){
				...
			}
			
			
			程序里的注释：
				//单行注释
				
				/*
					多行注释
					。。。
					。。。
				*/
				
			
			
			
			至少执行一次
			
			
			/*do{
				要执行的代码;
				...
			}while(条件);*/
			
			
			
			
			#include <time.h>
			时间永远在走
			time(0)
			srand(time(0));
			相当于种树
			rand()
			
			
			
			取余数de妙用：
				对10求余数：0~9
				
				rand()%n
				0~(n-1)
				
				随机取0~100的数
				rand()%101
				
				
				
			任何数跟9相乘，
			把各个位上的数相加，
			最后结果为9
			
			
			8*9=72
			4*9=36
				
				
				
				
		










