Shell编程流程
===================
vim    a.sh

#!/bin/bash
pwd
ls
cal
touch a.txt


退出 vim


修改权限：增加x权限
chmod  u+x  a.sh


执行 a.sh 文件
/root/a.sh
./a.sh

sh  a.sh

.  a.sh
source  a.sh


=========================

执行方式(a.sh)

方法1. 绝对路径(需要增加执行权限)
		/root/a.sh
		./a.sh
		
方法2. 作为参数(可以不要执行权限)
sh   a.sh
.    a.sh
source  a.sh


=============================


bash 是 shell 一个具体产品
也是 linux 系统默认的终端产品

用户体验很好
tab  		自动补全
上下方向键  切换命令
history     历史记录
别名




if  条件;then
	执行的内容
fi



=========================

Shell 壳
Linux内核和用户之间的解释器(翻译官)

ls  ===>  0101010101



vim   hello.sh


#!/bin/bash
要执行的命令



===================

注释
# 注释内容



===================

通配符
*  ?  []  {}

*  可以匹配"任意长度"的字符
rm  -rf  *.txt
rm  -rf  music/*


？ 可以匹配"一位字符"
ls  ??.txt

[]  表示一个范围的字符
ls  -l  [a-d].txt

{}   表示并列的几个字符
ls  {a,b,x}.txt


===================

修改时间
date  -s  "时间字符串"

date  -s  "2017-10-1 10:00:22"
date  -s  "2017-10-1 10:00"
date  -s  "2017-10-1 10"
date  -s  "2017-10-01"

===================

在vim里

o  在当前行下方另起一行输入
O  在当前行上方另起一行输入

u         撤销   (undo)
ctrl + r  反撤销 (redo)

===================

周期性计划任务
crontab  -e    (edit)   编辑
		 -l    (list)   列出
		 -r    (remove) 移除


分  时  日    月  周   命令(或脚本)
0   2    *     *  5   date >> time.txt
					 /root/c.sh

minute  hour  day  month  week



=======================

变量

可以不断变化的一个量

用户自定义变量
	a=10
环境变量（全部大写字母） HOME  USER  PATH
	echo  $HOME
	echo  $USER
	echo  $PATH
位置变量
	$1  $2  $3
	在执行一个脚本时，后面可以跟参数
	/root/a.sh   abc  a.txt
预定义变量
	记录执行脚本的信息
	$#  参数的个数
	$*  参数的列表
	$?  上一条命令执行是否成功
		0表示成功，其它表示失败
	
	/root/a.sh   abc  a.txt
	

	
	
	

=是赋值符号，表示把"右边的值"赋给"左边的变量"
a=10   给变量a赋值为10

$a         取变量a的值
echo  $a   显示变量a的值（结果：10）

a=50   给变量a重新赋值为50
echo  $a   （结果：50）

=====================

ctrl + L   清空屏幕
ctrl + u   清空光标前面的内容
ctrl + w   清空光标前面的一个单词


=====================

条件判断

数字比较 
-eq    equal 等于
-ne    not equal  不等于
-lt    less  than 比..小
-gt    greater  than  比..大
-le    less equal小于等于
-ge    greater equal大于等于

[ 56 -ge 18 ]
echo $?

==========================

字符串的比较
=
!=


[ $USER = "root"  ]
判断当前用户是否为root




=====================

分支语句

if [ 条件判断 ];then
	如果成立，执行这里的命令
fi



if [ 条件判断 ];then
	如果成立，执行这里的命令
else
	否则，执行这里的命令
fi



if [ $1 -ge 90 ];then
	echo 优秀
elif [ $1 -ge 70 ];then
	echo 良好
elif [ $1 -ge 60 ];then
	echo 及格
else
	echo 不及格
fi





===================
文件测试

-e   是否存在    exist
-f   是否是文件  file
-d   是否是目录  directory
-r   是否可读    read
-w   是否可修改  write
-x   是否可执行  execute

[ -e  a.txt ]
test  -e  a.txt
echo $?


====================

给 vim 设置显示行号（持久生效）

vim  .vimrc

加入一句：
  set nu
保存退出


========================
为了用户体验更好，一般会写一些 echo 命令对用户进行提示

echo  "请输入名字："
read name
echo "你输入的名字是 $name"


echo  -n  "请输入你的名字："
加上 -n 选项，打印完内容不换行


read  -p  "请输入你的名字：" name
-p 选项后面跟一句提示语，让用户输入对应内容 






























