三种界定符

" " 双引号，支持变量的扩展
		a=25
		echo "我今年$a岁"
		结果：我今年25岁
		
' ' 单引号，不支持变量的扩展
		a=25
		echo '我今年$a岁'
		结果：我今年$a岁
		
` ` 反撇号，支持把命令的执行结果作为值
		echo "现在的时间 `date`"
		结果：现在的时间 2018-10-16 9:59:23
		
		另一种同义写法： $(date)
		echo "现在的时间 $(date)"
		结果：现在的时间 2018-10-16 9:59:23
		
=========================

算术运算（整数）

expr 第一个数 操作符 第二个数

+   -    *      /          %
加  减   乘   除(求商)   求余数

expr  4 + 7
expr  8 - 4
expr  4 \* 8  因为*是Linux里的通配符，会有歧义，所以用\来转义
				转义：取符号本来的意义，去除其特殊功能
				比如：\*  的意思就是取 * 本身，而不是通配符
expr  26 / 8  求商，余数直接舍弃
				结果：3
expr  26 % 8  求余数，结果：2


$[5*3]   (比较常用)
$((5*3))
echo $[5*3]
echo $((5*3))

优点：数字左右可以不要空格
	  变量可以不加$
	  乘号*可以不加转义符
	  
		a=7;b=8
		echo $[a*b]
		
========================
		
让变量的值进行变化
(改变"变量"的值)

let a=a+1   等价于  let  a+=1

a+=1    a=a+1   a++
a-=1    a=a-1   a--
a*=3    a=a*3  
a/=6    a=a/6
a%=29   a=a%29


===========================

算术运算（小数）

bc   （Binary Calculator）
执行bc命令后，进入计算器模式，可以交互式操作

1+1.2
2.2


另一种用法：与管道 | 配合使用

echo "1+1.3" | bc
结果：2.3

echo "scale=3;5/3" | bc
结果：1.666


(scale 比例，保留小数点后面的位数)


=======================

交互式
	你一言我一语，即时反馈
脚本式
	把内容全部写在一个脚本文件里

=======================

&&   并且：两个都成立，整体才成立(and)
||   或者：至少有一个成立，整体就成立(or)

;    跟左右两边的成立与否无关，先执行左边，再执行右边
	 只是一种次序关系
	

=======================

ping   判断两台机器是否可以通信


ifconfig  查看自己的ip地址



ping  ip地址（或者网站的域名）
ping  172.25.0.11

-c 5    表示发送5个数据包
-i 0.2  表示发送数据包的频率是0.2秒

ping  -c  5  176.4.13.95
ping  -i  0.2  176.4.13.99
ping  -c  5  -i  0.2  176.4.13.99

========================

/dev/null   一个特殊的文件

echo hello > /dev/null

可以把一些无用的文本，重定向到 /dev/null 文件里

========================

给用户设置密码的简单方式（非交互式）

useradd wang
echo "123456" | passwd --stdin wang

echo "123456" | passwd --stdin wang > /dev/null



交互式：
root身份：passwd wang


===========================

for 循环



for  变量  in  列表
do
	
	
	
	echo $变量
	
	
	
	
done


列表里有几个值，就循环几次
每次循环，会从列表里取出一个值，赋值给变量(比如 a)
这个变量，可以在循环里直接使用（$a）



在for循环里，列表的表示方式：
1 2 3 6 8
{1,2,5,6}
{1..10}
`seq 10`   它是一条命令，要加``，表示从1数到10
		（sequence  顺序，序列）


=========================
九九乘法表

1*1=1
1*2=2 2*2=4
...
1*9=9 2*9=18 .....9*9=81


第九行的打印方式：

for a in {1..9}
do
	echo -n "$a*9=$[a*9] "
done
echo


显示效果：

1*9=9 2*9=18 ... 9*9=81


也可以写成：

for a in `seq 9`
do
	echo -n "$a*9=$[a*9] "
done
echo

======================

while 循环

i=5
while [ $i -gt 0 ]
do
	条件成立时执行
	let i-=1
done



while死循环

while :
do

done



=====================
break   停止循环

=====================

read 命令

可以读取用户输入的内容

echo -n "请输入名字："
read name


选项：
read  -p   "请输入名字："  name


==========================

if 


if...else





请输入你的考试成绩：

if [ 大于90 ];then
	优秀
elif [ 大于80 ];then
	良好
elif [ 大于60 ];then
	及格
else
	不及格
fi









如果条件成立，循环一直进行
直到不成立，循环结束

如果进入死循环，可以按 ctrl c 结束当前进程


=========================
猜数字游戏

1. 让系统生成一个随机数(1~100)
	answer=$[RANDOM % 100 + 1]
2. 提示用户开始猜数字
3. read 读取用户输入的数字
	read -p "请猜一个1~100之间的整数：" guess
4. 把两个数字进行比较，并提示用户
	“猜大了” “猜小了” “猜对了”
	
	if [ $guess -lt $answer ];then
		echo "你猜小了"
	elif [ $guess -gt $answer ];then
		echo "你猜大了"
	else
		echo "恭喜啊！你猜对了"
	fi
	
5. 如果猜得不对，继续猜，直到猜对为止
	
	break 可以结束循环
	
	
	
	while :
	do
		输入和比较的过程
		当猜对时，执行 break
	done
	
	
=============================

随机数

$USER $HOME $SHELL

$RANDOM   (random 随机的、任意的）

这个数字可能比较大，可以对它进行处理，限定一个范围


求余数的一个小技巧：
任何数对5求余数，结果肯定是 0~4 之间
任何数对10求余数，结果肯定是 0~9 之间

任何数对n求余数，结果肯定是 0~(n-1) 之间

$[RANDOM % 101]
结果：0~100之间

加大难度：
把随机值，限定在 1~100 之间
$[RANDOM%100+1]


练习：

6~88

第一步：先做 0~82
	$[RANDOM % 83]

第二步：整体加6
	$[RANDOM % 83 + 6]



=======================
a=10
echo "本次一共下载了$akb"
结果：本次一共下载了

因为系统会误认为要打印 $akb 变量
而这个变量不存在，所以打印的是空的内容

echo "本次一共下载了$a kb"
结果：本次一共下载了10 kb

如果显示“本次一共下载了10kb”？
echo "本次一共下载了${a}kb"

${}
作用：可以界定一个变量的范围，跟其它内容区分开























		
	






