自我介绍

郭兴楠

微信：gxingnan
=================


时间安排

9:30  开讲
11:30 吃饭

14:00  开讲
17:00  下课
=================

day01

认识行业
认识云计算
认识Linux系统
Linux命令
vim编辑器


day02

Shell 语法
编写 Shell 脚本
猜数字小游戏
=================

IT行业

一个“软件产品”的生命周期（诞生和发展）

产品部门（需求、竞品分析、功能、文档）
设计部门（图、文档）
开发部门（写代码）
   前端（PC：网站）
   后端（Java、PHP、Python...）
   移动端（APP：Android、iOS）
测试部门
云计算部门（上线、服务器、数据库、稳定）
市场部门
运营部门
售后部门
=================

服务器（硬件、软件）

Linux系统

键盘输入“命令”
字符界面
开源（免费）
更稳定
技术人员（企业）

Windows系统

鼠标点击
图形界面
闭源（收费）
稳定性不够好
小白（家庭）
=================

命令

生活中：立定、稍息、起立、滚
计算机中：date、history、poweroff

tab键   自动补全命令
上下方向键    从历史记录里切换命令

ctrl shift +  放大字体
ctrl -        缩小字体
=================

清空屏幕    clear（清理、收拾、打扫）
也可以用快捷键：ctrl + L

列出内容    ls  （list 列出、列表）
ls  选项
ls  -a   (all 所有，包含隐藏文件)
ls  -l   (long 长格式，显示详细信息)


选项也可以组合使用
ls  -al
=================

文件

创建  touch  a.txt
touch  b.txt  c.txt  d.txt

删除   rm   a.txt
(remove 移除，移走)
rm   b.txt  c.txt  d.txt
=================

文件夹	

创建  mkdir  music

(make 新建 directory 文件夹)
mkdir   movie  picture

删除  rm    -r   music
     命令  选项   参数
(recursive  递归地)

rm   movie   picture
=================

历史记录   history
日期时间   date

手册、说明书    man  touch
	(manual 手册)

日历       cal
(calendar 日历)

cal  年份
cal  2019

cal  月份  年份
cal   8    2019
=================

回声  echo  hello
效果：hello
=================

输出重定向

>   覆盖
ls > a.txt
date > a.txt
cal  > a.txt

>>  追加
date >> a.txt
cal  >> a.txt	
echo  hello  >>  a.txt
=================

查看文本文件内容

cat    a.txt
(concatinate  连接)
查看文本文件里的所有内容，显示在屏幕上

如果 cat 忘了加参数，
用 ctrl + c 结束当前进程

head   a.txt
查看a.txt的开头10行(默认)
head  -5  a.txt
查看a.txt的开头5行

tail   a.txt
查看a.txt的末尾10行(默认)
tail   -5  a.txt
查看a.txt的末尾5行
=================

管道  |

命令1  |  命令2
把命令1的结果，传递给命令2，继续处理

cal  |  head  -2
ls   |  head  >  a.txt
=====================

统计字数  wc
(word  count)

wc   文件名
wc   a.txt
48  76  776  guess.sh

如果只想看行数，加选项 -l (line 行)
wc  -l   guess.sh
48 guess.sh
=====================

查看ip地址   ifconfig

ifconfig  |  head  -2
=====================

vim 编辑器
Linux系统里的文本编辑器

vim  a.txt
若a.txt已存在，直接打开编辑器
若不存在，自动创建，并打开编辑器

编辑模式
	按 i 键进入编辑模式
	按 Esc 键返回一般模式

一般模式
	通过 vim 进入后的模式

末行模式
	按英文冒号:进入末行模式
	:w 保存(write)
	:q 退出(quit)
	:q! 不保存退出
	:wq 保存并退出(write  quit)
	:set nu  显示行号(number)
	:set nonu  不显示行号
=====================

vim 的“高级”用法
以下操作，都是在“一般模式”下

复制  nyy  (yanked 猛拉、复制)
从当前行开始，复制n行(n表示整数)

如果n<3,不提示
n>=3，才提示“复制了n行”

粘贴  np   (paste 粘贴)
在当前行下方，粘贴n次(n表示整数)

删除(剪切)   ndd  (delete 删除)
从当前行开始，删除n行(n表示整数)

撤销  u  (undo 撤销)
重做  ctrl+r  (redo 重做)
========================

Shell 编程
人与系统内核之间的翻译官、解释器

shell 是一类软件的抽象概括（类似:鸟类）
通过下方命令，可查看本机所有shell软件:
cat   /etc/shells

bash是Linux系统默认的终端软件
因为它体验好、简洁易用
上下方向键
history
tab
...
===================

编写脚本的流程

vim  test.sh

写入：

date
cal
touch  abc.txt
ls

执行脚本：
bash  test.sh
==================

不同语言编写的程序，使用不同的文件后缀。
在Linux系统里，只要内容正确，写什么后缀无所谓，
但为了与同事更好地协作，建议使用符合常理、约定俗成的后缀。

常见的后缀：
xx.java
xx.c
xx.js
xx.php
xx.py
xx.sh

guess_number.sh  烤串命名法
guessNumber.sh   驼峰命名法
==================

猜数字游戏脚本
guess.sh

执行：
bash  guess.sh


效果：
请输入一个数字：50
猜大了，重新猜：30
猜小了，重新猜：45
恭喜你猜对了

思路：

1、生成一个随机数(0~99)，用变量res保存

自义定变量：

声明并赋值（初始化）
a=10

“=”是赋值符，把右边的数，赋给左边变量

使用变量：
$a    

显示变量结果：
echo  $a

系统变量：
HOME  PATH  RANDOM ...    

查看值：
echo  $HOME
echo  $RANDOM
================

算术运算

+     -     *     /      %
加    减   乘   求商   求余


格式：
$[算式]
$[7+8*5/3]

a=10
b=20
$[a+b]

求余（%）的“妙用”：
  一个数对5求余数，结果范围是 0~4
  一个数对7求余数，结果范围是 0~6
  一个数对n求余数，结果范围是 0~(n-1)

把值很大的随机数，限定在0~99之间：
  对100求余数
  $[RANDOM%100]

2、提示用户输入数字，用变量guess保存

echo 默认带有“换行”功能
如果不想让它换行，加上 -n 选项

echo  -n  "请输入一个0~99的整数："    

用户输入数值，程序得到这个值并保存
read  变量名
效果：程序停顿下来，等待用户输入
输入完成后，会把输入的内容赋值给变量

read   b
如果输入50，回车
效果等同于 b=50
================

两种界定符：双引号、单引号

双引号，可以替换里面的变量为值
a=10
echo  "$a"
效果：10

单引号，不替换变量，照抄
a=10
echo  '$a'
效果：$a

3、判断 guess>res，提示猜大了

数值的比较
 
相等       -eq  (equal)
不等       -ne  (not equal)
小于       -lt  (less than)
大于       -gt  (greater  than)
大于等于    -ge  (greater  equal)
小于等于    -le  (less  equal)


判断

test  $a  -eq  $b
	
$?   用来存储上一条命令的执行结果
0    上一条命令成功执行
非0  上一条命令未成功执行

可以把两条命令，写在一行执行，中间用分号隔开即可
test  $a  -eq  $b; echo $?

test语句写起来复杂，易出错。
另一种简单的写法：

[ $a  -eq  $b ]
效果等同于：
test  $a  -eq  $b
======================

分支语句

if...else...
如果  否则

第一种（条件成立，执行。否则啥也不干）

if [ 条件判断 ];then
	当条件成立，执行这里的语句
fi

第二种（条件成立、不成立，分别执行对应代码。非黑即白）

if [ 条件判断 ];then
	当条件成立，执行这里的语句
else
	当条件不成立，执行这里的语句
fi

第三种（多种情况，执行其一）

if [ 条件1 ];then
	当条件1成立，执行这里
elif [ 条件2 ];then
	当条件2成立，执行这里
else
	当条件1、2都不成立，执行这里
fi
======================

while循环

while [ 条件判断 ]
do
	要循环执行的语句
done


死循环（条件永远成立）

while true
do
    要循环执行的语句
done
==================

结束循环

break
==================

注释

执行时被程序无视，不产生影响

Shell脚本的注释，以井号（#）开头

# 判断次数是否大于5
if [ $count -gt 5 ];then
	....
fi

=======完整代码========

# 取一个随机值,限定在0~99之间
res=$[RANDOM%100]

# 初始化一个变量count,记录猜的次数
count=0

# 死循环,如果猜不中,一直猜。猜对为止
while true
do
    # 提示用户输入
    echo -n "请输入一个0~99的整数:"

    # 用变量guess保存用户输入的数据
    read  guess

    # 每多猜一次,次数+1
    count=$[count+1]


  # 猜第5次时，友情提示一下（这段不是必需，可不写）

  if [ $count -eq 5 ];then
     echo "这是猜第5次了哦,加油!"
  fi

  if [ $guess -gt $res ];then
     echo "猜大了"
  elif [ $guess -lt $res ];then
     echo "猜小了"
  else
     echo "恭喜,猜对了,一共猜了$count次"
	
     # 次数大于5，讽刺，否则表扬（这段不是必需，可不写）

     if [ $count -ge 5 ];then
	echo "真笨,居然猜了这么多次"
     else
	echo "厉害"	
     fi
    	
     # 猜对时，程序会执行到此，break结束循环
     break
  fi

done