day02

=========================
调大字体 ctrl shift +
调小字体 ctrl -

=========================
shell脚本

shell  壳  

vim   a.txt
vim   a.c 
vim   a.java
vim   a.html
vim   a.sh

============================
猜数字游戏

1、计算机随机生成一个数字a
2、提示用户猜 echo 
3、用户输入一个数字b
4、比较a和b的大小
5、进入死循环
   如果b>a，提示“猜大了，再猜”
   如果b<a，提示“猜小了，再猜”
   如果b=a，提示猜对了，结束死循环
   
=========================
变量

用户自定义变量
初始化一个变量 a=10
使用变量    $变量名
		比如 $a
		
		echo  $a

系统变量
	$HOME  $PATH  $RANDOM
		

数学运算 
	+ - * / %
	
	
求余的妙用：
对5求余数，结果0~4
对9求余数，结果0~8
对n求余数，结果0~(n-1)

把$RANDOM对100求余数，就可以得到0~99

============================
`Linux命令`

可以在脚本里，执行``里面的命令
然后把执行结果，赋值给一个变量
比如：
a=`echo $[RANDOM%100]`

============================
read  -p  "请输入..." b
echo $b

============================
判断（真，假）

数字比较:
-eq  相等 (equal)
-ne  不相等 (not equal)
-gt  大于 (greater  than)
-lt  小于 (less than)
-ge  大于等于 (greater equal)
-le  小于等于 (less equal)


用法：
test 2 -eq 3
test 2 -eq 2


$?  存储上一条命令执行的结果


判断的简单方法：
[ 2 -eq 3 ]

=======================
分支语句

if..else

============================

if [ 判断 ];then
	如果条件成立，执行这儿的语句
else
	否则，执行这儿的语句
fi



if [ 判断1 ];then
	如果条件1成立，执行这儿的语句
elif [ 判断2 ];then
	否则，如果条件2成立，执行这儿的语句
else
	以上都不成立，执行这儿
fi



if [ $b -gt $a ];then
	echo "猜大了"
elif [ $b -lt $a ];then
	echo "猜小了"
else 
	echo "恭喜你，猜对了"
fi

===========================
循环语句

for循环


for  变量  in  列表
do
	要循环的语句
	可以直接使用 $变量
done


==========================
序列  seq 10
显示1~10的次序

==========================

for  a  in  `seq 10`
do
	
done

   
=========================
结束循环
	break

=========================
while循环


while [ 判断 ]
do
	要执行的语句
done


如果条件成立，执行循环语句
直到条件不再成立，结束循环

=======================
let  a=a+1
让a的值增加1

如果执行 $[a+1]
a的值并没有变化，因为没有重新赋值


=======================
注释
 
# 下面这段是一个循环
for  a  in   1 2 3 
do

done

==============================

猜数字游戏代码：
http://2hao.cc/cai.txt







