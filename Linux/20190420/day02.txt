day02
===============
vim  day01.txt
写入昨天的 6 条命令
每行写一个命令

===============
ls
ls  -a
ls  -l
ls  -lh
ls  -alh
touch  a.txt
rm  a.txt
mkdir  Jay
rm   -r  Jay
mkdir   -p    a/b/c

路径
/   根目录
/home  
/etc

echo  hello
echo  hello > a.txt
命令 > 文件
history > 文件

cd  music
ls
ls > music.txt

====================
把a.txt的内容清空
> a.txt

====================
clear
ctrl L

tab 自动补全命令

man 手册、说明书(manual)
man  ls
按q可以退出man模式

vim  a.txt

touch a.txt

========================

which  一个命令名字
可以找到这个命令程序所在的位置
比如： which  ls
/bin/ls

cd  /home
cd 
cd  ..    跳到上一层目录
cd  ../.. 往上跳2层目录
cd  -     返回(从哪儿来，到哪儿去)

=================
ls  列出"当"前目录里的内容

ls  路径
把路径里的内容列出来

如果没有写路径作为参数，
则列出当前文件夹里的内容

ls  /
ls  /home

ls  /home/student/a.txt
查看有没有某个文件

=================
查看当前所在的路径
	pwd  (print  working directory)
	     打印  正在工作的   路径  

=================
vim 的高级用法
（一般模式下）

复制   nyy  (yanked 复制)
		(n表示整数，如果是1，可以省略)
		从当前行开始，复制n行
		
		如果n<3，不提示"复制成功"
		n>=3，才会提示

粘贴   np    (paste 粘贴)
		(n表示整数，如果是1，可以省略)
		在当前行下方，粘贴n遍
		
剪切（删除）  ndd   (delete 删除)
		(n表示整数，如果是1，可以省略)
		从当前行开始，删除n行

======================
撤销   u  （undo 不做、撤销）

重做   ctrl r  (redo 重做，跟撤销相反)

======================
1、把当前月份的日历，
	重定向到a.txt
	
2、使用vim的复制、粘贴、剪切技巧，
	让内容成为左边的样子
	
	
	>   cal  nyy  np  ndd
	u
	
=======================
跳转行
	ngg  跳到第n行
	(n表示整数，如果是1，可以省略)
	
	G    跳到最后一行
	
	vim  文件名  +n
	打开文件时，跳到第n行

========================
输入大写字母
	shift + 字母键

========================
脚本式
	把要执行的命令，写到文件里
	直接执行文件
	
交互式
	输一句，执行一句

========================
java    a.java
c       a.c
python  a.py
php     a.php

shell   a.sh

========================
shell  壳


bash（软件名字）     属于shell的一个具体产品
微信                 聊天工具

========================
bash     

history
上下方向键
>
>>
tab 

=======================
vim   hello.sh

#!/bin/bash
echo  hello
date
cal
pwd
touch  abc.txt

======================
执行脚本
bash  脚本文件名

======================
睡觉   
	sleep 秒数
	
======================
变量
	赋值
		a=10
	
	取值
		echo $a

======================
编程的原理
	变量   流程控制   循环语句   算术运算   

======================
猜数字

1、系统随机生成一个整数a
	限定范围：0~99
	
	a=$[RANDOM%100]
	
2、让用户输入一个数字 b
	
	echo "请输入一个（0-99）数字："
	read   b
	
	
	read  -p  "请输入:"  b
	

3、比较b和a的大小
	如果b>a，提示“猜大了，重新猜”……
	如果b<a，提示“猜小了，重新猜”……
	否则，猜对了，游戏结束

=====================
让Linux生成随机值
	系统内置变量（全部大写字母）
	$RANDOM
	$PATH
	$HOME

如何把一个整数，限定在一个范围里（0-99）
一个数，对5求余数，结果：01234
一个数，对8求余数，结果：01234567

对n求余数，结果是 0~(n-1)

$[RANADOM%100]

=======================

+   -    *    /     %
加 减   乘  求商  求余

shell里，算术运算 $[表达式]

echo  $[7/4]

======================

$[RANDOM%100]

读取用户的输入  read
	read  变量名

======================
分支语句

数字判断（结果：对，错）

	   等于        -eq   (equal 相等)
	   不等于      -ne   (not equal 不等于)
	   大于        -gt   (greater than 大于)
	   小于        -lt   (less  than  小于)
	   大于等于    -ge   (greater equal)
	   小于等于    -le   (less  equal)

判断语法   [  $b  -gt  $a  ]
           [  $b  -eq  $a  ]

		   echo $?
		   
结果保存在 $?

$? 专门用来存储“上一条命令的执行情况”
如果成功，值是 0
如果不成功，值不是 0

==========================
if..else 语法

if [判断];then
	如果判断成立
	则执行这里的语句
fi



if [判断];then
	如果判断成立
	则执行这里的语句
else
	如果判断不成立
	则执行这里的语句
fi




if [判断1];then
	如果判断1成立
	则执行这里的语句
elif [判断2];then	
	如果判断2成立
	则执行这里的语句
else
	如果判断不成立
	则执行这里的语句
fi




if [ $b -lt $a ];then
	echo "猜小了"
elif [ $b -gt $a ];then	
	echo "猜大了"
else
	echo "恭喜你，猜对啦！"
fi

=====================
while循环
	当条件满足时，一直执行
	
	死循环，一直执行
	while true
	do
		如果判断成立
		循环执行这里的语句
	done
	

循环的终止
	echo "恭喜你，猜对啦！"
	break
	
========================
考试成绩

如果成绩>=90，优秀
>=80，良好
>=60，及格
否则，不及格


1、请输入成绩
	read  a
2、if [ $a -ge 90 ];then
		echo "优秀"
   elif [ $a -ge 80 ];then
		echo "良好"
   ...
   else
		echo "不及格"
   fi



if语句，匹配即停止，不会再往下执行
只会执行一种情况



====

#!/bin/bash

a=18

read -p "请输入你的年龄:" b

if [ $b -ge $a  ];then
	echo "你是个成年人了"
else
	echo "你是个未成年人"
fi

========

#!/bin/bash
read -p "请输入成绩:" score
if [ $score -ge 90 ];then
	echo "优秀"
elif [ $score -ge 80 ];then
	echo "良好"
elif [ $score -ge 60 ];then
	echo "及格"
else
	echo "不及格"
fi
========

#!/bin/bash
while true
do
	echo "hello"

done

========

#!/bin/bash
result=$[RANDOM%100]
while true
do

read  -p  "请输入0-99的数字:"   cai
if [ $cai -lt $result ];then
	echo "猜小了"
elif [ $cai -gt $result ];then
	echo "猜大了"
else
	echo "恭喜,猜对了!"
	break
fi

done
