练习：

1. 打印1~150之间的所有奇数
		循环1~150
		判断是否奇数
2. 写出一个判断闰年的脚本，可以让用户输入年份
		能被4整除并且不能被100整除
		或者
		能被400整除
3. 写出一个猜数字（1~100）游戏脚本
		随机值
		循环
		猜
		比较
		猜对时，break
4. 根据名单文本，批量创建用户并设置密码
		创建name.txt
		循环
		创建用户
		设置密码
===========================
奖励：

写出2、3、4的，16G U盘一个
随便写出其中两个，抽纸一包

===========================

cut 命令 （切开）

显示行中的指定部分

vim  student.txt

(用tab分隔)
id	name	age
1	michael	18
2	james	22


选项：

-f   显示指定字段的内容（默认tab）
	cut -f 1 student.txt
	cut -f 1,3 student.txt
		显示第1和3个字段（以tab作为分隔）
		
-d   指定以什么作为分隔符
	cut -d "," -f 2 student.txt
		以","作为分隔符，显示第2个字段

-c   显示指定范围的字符
	cut -c 2-5 hello.txt
		显示hello.txt每行里第2-5个字符
		
===========================

变量内容的截取

id="152705199106062356"

echo $id | cut -b 7-14

${} 抽象功能：用来“显示”变量数据内容

${id}
结果：显示“152705199106062356”

====================
索引、下标

注意：下标是从0开始

hello   字符串
01234   对应下标


${id:开始截取的下标:要截取的个数}
${id:3:2}
在id变量的值里，从"下标"为3的位置开始截取，截2位

脚本练习：
编辑一个身份证号文本 id.txt，一行一个
截取出所有的生日，重定向到 birthday.txt

============================
${#变量} 获取一个字符串变量的长度

a="hello"
${#a}
结果：5

============================
随机生成一个8位数密码
包含：数字、大小写字母、下划线、)(.

形如：y7O_)D5b


分解：
1. 随机取一位字符

# 完整字符串
data="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.()_"
length=${#data}

# 初始化密码变量
result=""

for a in `seq 8`
do
	rand=$[RANDOM%length]
	n=${data:rand:1}
	result=$result$n
done

echo $result

================
拼接字符串

pswd=S

pswd=${pswd}a
Sa

pswd=${pswd}d
Sad

pswd=${pswd}V
SadV

变量=$变量+要拼的内容
 新    旧

=============================
练习：

创建一个名单文本 name.txt
编写脚本，批量创建文本里的用户
并且，使用机器（随机）给他们创建不同的8位密码并设置


for  a  in   `cat  name.txt`
do
	useradd   $a
	
	# 在这里生成密码
	
	echo 密码 | passwd  --stdin  $a > /dev/null

done

=====================
case 分支语句 (case 情况)

case 变量  in
1）
	执行指令;;
2）
	执行指令;;
*)
	执行指令
esac


变量的值等于几，就执行哪一种情况
注意：每种情况，以;;结尾

====================
Shell 中的函数

把多条命令，打包成一个函数，起一个名字

定义一个函数：

函数名(){
执行指令1
执行指令2
执行指令3
.....
}


hello(){
	echo "==========="
	echo "hello world"
	echo "==========="
}

hello


注意：函数先定义，再使用

=================
变量的默认值

read -p "请输入密码" pswd
echo $pswd | passwd --stdin guoxn

pswd=${pswd:-123456}
如果pswd本来有值，则"="右边的结果为该值
否则，"="右边的结果为123456

=================
字符串的替换显示

只替换第一个符合条件的字符：
a="hello"
${a/旧字符/新字符}

替换所有符合条件的字符：
a="hello"
${a//旧字符/新字符}

只是显示时替换，变量本身没有发生改变
如果想要改变变量的内容，可以重新赋值
a=${a//l/o}






















	
		
