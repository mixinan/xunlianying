Shell  壳
抽象的概念

具体产品：
/bin/sh
/bin/bash   默认
/usr/bin/sh
/usr/bin/bash
/bin/tcsh
/bin/csh

bash体验较好，是Linux系统的默认终端工具
tab
上下方向键
alias
快捷键
....


======================
注释
以#开头的语句

计算机在执行脚本文件时，会忽略注释内容

举例：
C语言的编译过程，先“预处理”源码文件，把所有的注释内容删除，生成一个没有注释内容的临时文件，接着处理这个临时文件

弱类型   
var a=10
var b="hello"

强类型 java  c
int a=10
string a="hello"

===========================
变量

自定义变量
a=10
hello="hello world"
echo  $a
echo  $hello


系统环境变量
PATH   USER   HOME   PWD  ...

echo $PATH
echo $USER


位置变量
$1  $2  $3 ...

在执行脚本时，可以传入参数
在脚本里，通过“位置变量”接收“传入的参数”

sh  for.sh   80  66

脚本里的内容：
echo  $1
echo  $2

结果：
80
66


预定义变量
$*  $#   $?

$#   记录执行脚本时，传入的参数个数
$*   记录执行脚本时，传入的参数列表

$?   记录执行是否成功
	 成功：0
	 不成功：非0


===========================
条件判断

test  

test  6 -gt  5
[ 6 -gt 5 ]
注意：[]左右要加空格



数字判断
大于        -gt   (>   greater  than)
小于        -lt   (<   less  than)
等于        -eq   (=   equal)
不等于      -ne   (!=  not equal)
大于等于    -ge   (>=  greater equal)
小于等于    -le   (<=  less equal)

test  6  -gt  5
echo  $?

====================
分支语句（作用：流程控制）

程序默认从上往下执行，
可以使用流程控制语句，改变它的默认执行顺序

if...else 语句

用法：

如果...，就...。

if [ 条件判断 ];then
	条件符合，执行这里的代码
fi

============================

如果...，就...，
否则，就...。

if [ 条件判断 ];then
	条件符合，执行这里的代码
else
	条件不符合，执行这里的代码
fi

====================

如果...，就...，
否则如果...，就...，
否则如果...，就...，
否则，就...。

if [ 条件1 ];then
	条件1符合，执行这里的代码
elif [ 条件2 ];then
	条件2符合，执行这里的代码
elif [ 条件3 ];then
	条件3符合，执行这里的代码
else
	以上条件都不符合，执行这里的代码
fi


注意：一旦条件符合，流程结束。只匹配一种情况。

==================
练习

创建脚本 abc.sh ，实现功能：
传入一个年龄，如果大于或等于18，显示“大人”
如果小于18，显示“小孩”


=======================

字符串判断

=      等于
!=     不等 （!是取反的功能）


name=$1
if [ $name = 'root' ];then
	echo "管理员"
else
	echo "普通用户"
fi

=========================

文件的判断

-f    是否为文件   (file)
-d    是否为文件夹 (directory)
-e    是否存在     (exist)
-r    是否可读     (read)
-w    是否可修改   (write)
-x    是否可执行   (execute)


if [ -e  a.txt ];then
	echo "a.txt存在"
	echo "正在删除..."
	rm -f a.txt
	echo "a.txt已删除"
	ls  a.txt
else
	echo "a.txt不存在"
	echo "正在创建..."
	touch a.txt
	echo "a.txt已创建"
	ls  a.txt
fi

===========================

三种界定符


" "
支持变量的替换

age=20
echo "小明的年龄是$age"
结果：小明的年龄是20



' '
不支持变量的替换

age=20
echo '小明的年龄是$age'
结果：小明的年龄是$age



` `
反撇号，可以把命令的执行结果，作为数值

echo  "现在时间`date`"
结果：现在时间2018-12-12 14:57:23

$()
可以把命令的执行结果，作为数值
echo  "现在时间$(date)"
结果：现在时间2018-12-12 14:57:23


练习：
10月份的压缩包 backup10.tar.gz
11月份的压缩包 backup11.tar.gz
12月份的压缩包 backup12.tar.gz


tar    -zcvf   backup`date +%m`.tar.gz   a.txt

===========================
让 vim 永久显示行号

修改配置文件 ~/.vimrc
加一句 set nu

===========================
read

read  变量名
等待用户输入，把内容赋值给"变量"

-p   在读取用户输入之前，可以先打印一句提示
read  -p  "请输入年龄："  age

==========================
seq   (sequence  序列)

seq  10
显示从1到10的序列




for   变量名   in   列表
do
	要循环的执行语句
	在这里，可以直接使用 $变量
done


列表有多少个数据，循环就执行多少次



{1..20}   或者  `seq  20`
从1到20


for  a  in  `ls  *.txt`
do
	chmod  u+x  $a
done

===================
设置用户密码

echo "123456" | passwd  --stdin  用户名

standard  标准的
input     输入

==================
/dev/null

比较特殊的设备文件，不保存内容
可以把“不想显示的数据”，重定向到这个文件

echo "123"  >  /dev/null
cat  /dev/null
结果：内容为空，没有内容

静默设置密码：
echo "123456" | passwd  --stdin  用户名  >  /dev/null





