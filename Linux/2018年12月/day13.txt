练习：

编写一个脚本，让用户输入一个正整数 n
计算机输出 1~n 的和

1+2+3+..+n

===================
sum(){
	n=$1
	res=0
	for a in `seq $n`
	do
		res=$[res+a]
	done
	echo $res
}

read -p "请输入正整数：" num
result=`sum $num`
echo "1~${num}的和是$result"

==========================
正则表达式

grep     "^root$"       a.txt
查找内容只有“root”一个词的行

grep   "ss*"   a.txt
在s后面有任意个s的行

egrep   "(ha){2,5}"   a.txt
"ha"出现2~5次的行

egrep  "go+"   a.txt
g的后面至少有一个o的行

egrep  -v  "^$"   a.txt
grep    "."    a.txt
显示有内容的行

egrep   "^[^a-z]"   a.txt
不以小写字母开头的行

==========================

sed  (stream editor) 流编辑器

格式：

sed   选项   “条件 操作”   文件

sed  -n  "2p"  a.txt
显示第2行的内容


选项：
-n   屏蔽默认输出（默认要输出全部）
-i   直接编辑文件并保存到硬盘
-r   支持扩展正则

=========================
条件（行号，正则，不写）：

行号
	3     操作第3行
	3,6   操作3~6行
	3,+2  操作第3行，以及后面的2行
	1~2   操作第1行，还有后面所有的+2行（操作奇数行）
	2~2   操作偶数行
	
	
正则
	sed  -n  "/正则表达式/操作"  a.txt

	sed  -n  "/k$/p"   a.txt
	打印a.txt里以k结尾的行
	
	
如果不写条件，则处理整个文件的所有行（hang）

========================
操作：
p    (print) 打印、显示

d    (delete) 删除
	 sed '3,$d' a.txt
	  把第3行到结尾的行，都删掉
	  注意：使用单引号''

s    替换
	 s/old/new/第几个
	 sed   "5s/L/v/"  a.txt
	 把第5行的第1个（默认）“L”换成“v”
	 
	 sed   "5s/L/v/2"  a.txt
	 把第5行的第2个“L”换成“v”

	 sed   "5s/L/v/g"  a.txt
	 把第5行所有的“L”换成“v”
	 
a    （append）追加 
	 sed   "5a hello"  a.txt
	 在第5行下面，追加"hello"
	 
	 sed -i '$a # This is a test'
	 在最后一行加入 # This is a test
	 
i	 （insert） 插入
	 sed   "5i world"  a.txt
     在第5行上面加入"world"
	 
c	 （change） 改变  
	 sed   "5c abc"  a.txt
	 把第5行内容变成"abc"
	 
	 sed "2,5c abc" a.txt
	 把第2~5行，整体替换为一个"abc"

========================
QQ空间：今天***来南京啦！

编写一个“和谐”脚本，把一个文本文件发给该脚本，自动过滤成“和谐”版本，显示在屏幕上。

hexie_words.txt


string=""
for word in `cat hexie_words.txt`
do
   string="${string}|$word"
done

======================
练习：

要求把 a.sh 第4行注释掉
注释：以 # 开头的内容，程序在执行时，忽略此行

给第四行开头，加一个 #

sed  "4s/^/#/"  a.sh

再加第4行的注释去掉

sed  "4s/#//"   a.sh

=====================

总结：

选项：
-n
-i
-r

条件：
行号
正则
不写

操作：
p
d
s
a
i
c

=========================
分组

按性格分：能说，不爱说的，学得好的

4组     3人/组

每组4天内容，做PPT

逐字稿

=====================
Zoomit

ctrl + q  放大
ctrl + 2  标注
ctrl + k  黑板（black）
ctrl + w  白板（white）
Esc 退出

ctrl + 3  下课10分钟
ctrl + 4  放大窗口（再按一次组合键，退出放大模式）

颜色： r  g  b  y  o
      红 绿  蓝 黄 橙

=====================
让变量（整数）的值进行变化

let a=a+1
let b+=1

let  a++
let  a--

a++ 功能与 a=a+1 或 a+=1 一样

=====================
.bashrc

用sed去除所有的空行和注释

sed  -r  "/^$|^#/d"  .bashrc


=====================
练习：
删除脚本文件里的所有注释（不能删除第一行的声明）

#!/bin/bash

# 循环
for a in `seq 10`
do
	echo $a
done

用法：
sed "/^#[^\!]/d" test.sh
以#开头，并且#后面不是!
!必须加转义符\!
因为!在Shell里表示"取反"，有特殊含义

===================
如果有多个条件和操作，可以用分号;隔开
sed  "2d;4d" test.sh

===================
sed -r 's/^(.)(.*)(.)(.)$/\3\2\1\4/' a.txt

把每行的内容，分成3部分：
第一个字符
中间所有字符
最后一个字符

s/old/new/
new不能直接写作321，否则会全部被换成"321"

====================
掐头去尾

掐头：
从左向右，最短匹配删除
    ${变量名#*关键词 } 
从左向右，最长匹配删除
    ${变量名##*关键词 }

去尾：
从右向左，最短匹配删除
	${变量名%关键词*}    
从右向左，最长匹配删除
	${变量名%%关键词*}



掐头符号 #
${变量#*关键词}  删除关键词及前面的部分

a="root:a:b:c"
${a#*:}
结果 a:b:c

一个#，只掐掉第一个符合条件(冒号)的内容
如果想要掐掉最后一个符合条件的，用两个##

a="root:a:b:c"
${a##*:}
结果 c

====================
去尾符号 %
a="root:a:b:c"
${a%:*}
结果 root:a:b

a="root:a:b:c"
${a%%:*}
结果 root

=============
/etc/shadow  

此文件记录了用户密码信息

root:$6$UiGoel8EJgtdsMjyquqvKAmf1:16261:0:99999:7:::

获取密码（第一个冒号后面的部分）：

pass2=${pass1#*:}    掐头，掐掉第一个:及前面的内容

$6$UiGoel8EJgtdsMjyquqvKAmf1  :  16261  : 0 : 99999 : 7:::

pass=${pass2%%:*}    去尾，去掉最后一个（从右往左）:及后面的内容

$6$UiGoel8EJgtdsMjyquqvKAmf1

===================
练习：

data=`grep  "^root"  /etc/shadow`


从 /etc/shadow 文件里，读取以root开头的一行内容
用 sed 获取密码（第一个:和第二个:中间的部分）


